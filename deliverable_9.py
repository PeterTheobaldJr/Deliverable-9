# -*- coding: utf-8 -*-
"""DELIVERABLE_9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZokgyvX9Eg7UQT5jj0GTasnzJUguzqGx
"""



import pandas as pd
import numpy as np

house_price = [50000,200000,140000,320000,220000,380000] # observations of the target variable
house_size = [500, 1500, 2500, 3500, 4500, 5500] # predictor or feature
kitchen_size = [40, 100, 200, 220, 250, 300] #predictor or feature

house_data = pd.DataFrame({'house_price': house_price,'house_size': house_size, 'kitchen_size': kitchen_size})
house_data.head()

from sklearn.model_selection import train_test_split

features = ['house_size', 'kitchen_size'] # features names
X = house_data[features]
Y = house_data['house_price']

X.head()

Y.head()

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state =0)

a, b = 1, 2

help(train_test_split)

from sklearn.linear_model import LinearRegression
my_linear_regression = LinearRegression()
my_linear_regression.fit(X_train, Y_train)

print("R^2 =", my_linear_regression.score(X_train, Y_train))

print('The intercept (b_0) is {}'.format(my_linear_regression.intercept_))
print('The coef (b_1) is {}'.format(my_linear_regression.coef_[0]))
print('The coef (b_2) is {}'.format(my_linear_regression.coef_[1]))

house_price_pred = my_linear_regression.predict(X_test)
house_price_pred

from sklearn import metrics
print('Mean Absolute Error:',metrics.mean_absolute_error(Y_test, house_price_pred))
print('Mean Squard Error:', metrics.mean_squared_error(Y_test, house_price_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, house_price_pred)))

def MAPE(Y, pred): #MAPE : Mean Abs Percentage Error
  l1 = list(Y)
  l2 = list(pred)
  er = []
  for i in range(len(l1)):
    e = np.abs(l1[i]-l2[i])
    er.append(e/l1[i])
  return np.mean(er)

print('MAPE:', MAPE(Y_test, house_price_pred)*100, "%")

"""Part 2

http://lib.stat.cmu.edu/datasets/boston
"""

import pandas as pd 
df = pd.read_csv('/content/boston_housing.csv')
df.head()

import matplotlib.pyplot as plt
plt.figure(figsize = (8, 5))
plt.hist(df['MEDV'], color = 'Tab:red')
plt.title('Boston Houseing Prices Histogram', fontsize = 15)
plt.xlabel('Mdeian value of owner-occupied homes in $1000\'s', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.ylabel('Number of Houses', fontsize = 15)
plt.show()

plt.figure(figsize= (8, 5))
plt.scatter(x = df['CRIM'], y = df['MEDV'], color = 'Tab:blue')
plt.xlabel('Crime Rate', fontsize = 15)
plt.ylabel('House Price', fontsize = 15)
plt.show()

df.head()

features_names = df.columns.to_list()[:-1]
X = df[features_names]
Y = df['MEDV']

df.columns.to_list()[:-1]

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size =0.25, random_state=0)

my_linear_regression = LinearRegression()
my_linear_regression.fit(X_train, Y_train)

pred = my_linear_regression.predict(X_test)
pred

plt.figure(figsize = (8, 5))
plt.scatter(x = Y_test, y = pred, color = 'Tab:green')
plt.xlabel('Actual House Price', fontsize = 15)
plt.ylabel ('Prediction', fontsize = 15)
plt.show()

print('The model r2 score is: {}'.format(my_linear_regression.score(X_train, Y_train)))

print('The intercept (b_0) is {}'.format(my_linear_regression.intercept_))
for i in range(len(features_names)):
  print('The coef (b_{}) is {}'.format(i+1, my_linear_regression.coef_[i]))

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test,pred))
print('Mean Squared Error:',metrics.mean_squared_error(Y_test,pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test,pred)))
print('MAPE', MAPE(Y_test, pred)*100, "%")

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
data_norm = scaler.fit_transform(df)
df_norm = pd.DataFrame(data_norm, columns = df.columns.to_list())

from sklearn.linear_model import LinearRegression
my_linear_regression =LinearRegression()
X = df_norm[features_names]
Y = df_norm['MEDV']
my_linear_regression.fit(X, Y)

summary = pd.DataFrame({'Features': features_names, 'Scores': my_linear_regression.coef_})
summary

import matplotlib.pyplot as plt
plt.figure(figsize = (8, 5))
plt.bar(x = summary['Features'], height = summary ['Scores'], color = 'Tab:gray')
plt.title('Boston Housing Prices Histogram', fontsize = 15)
plt.xlabel('Features', fontsize = 15)
plt.ylabel('Importance Score', fontsize = 15)
plt.show()